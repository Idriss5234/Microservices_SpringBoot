# Microservices avec RabbitMQ et Processus Saga

Ce projet met en ≈ìuvre une architecture de microservices comprenant quatre services principaux : **Utilisateur**, **Panier**, **Commande**, et **Paiement**. La communication entre les services **Panier** et **Commande** est impl√©ment√©e √† l'aide de RabbitMQ et d'un processus Saga pour la gestion des transactions distribu√©es.

---

## üìã Sommaire

1. [Outils et versions](#outils-et-versions)
2. [Architecture](#architecture)
3. [Installation](#installation)
4. [Configuration](#configuration)
5. [Ex√©cution du projet](#ex√©cution-du-projet)
6. [Tests](#tests)

---

## üõ†Ô∏è Outils et versions

Voici la liste des outils utilis√©s dans ce projet avec leurs versions exactes :

- **Java** : OpenJDK 17
- **Spring Boot** : 2.7.5
- **Docker** : 26.0.0
- **MySQL** : 8.0.40 (MySQL Community Server - GPL)
- **Maven** : 3.9.8
  
---

## ‚öôÔ∏è Architecture

Ce projet comprend quatre microservices interconnect√©s :
1. **Utilisateur** : Gestion des utilisateurs et des authentifications.
2. **Panier** : Gestion des articles ajout√©s au panier par les utilisateurs.
3. **Commande** : Gestion des commandes pass√©es par les utilisateurs.
4. **Paiement** : Gestion des paiements associ√©s aux commandes.

### Communication entre services

- **RabbitMQ** est utilis√© pour √©changer des messages entre les microservices. 
- La communication Saga est utilis√©e entre les services **Panier** et **Commande** pour garantir la coh√©rence des transactions. 

### Files d'attente RabbitMQ

Les files suivantes sont configur√©es :
- `api1-consumer-queue`
- `api1-producer-queue`
- `api2-consumer-queue` 
- `api2-producer-queue` 

### Gestion des transactions Saga

1. **D√©but de Saga** : Lorsque l'utilisateur passe une commande, un message est envoy√© via RabbitMQ pour initier le processus.
2. **√âtapes interm√©diaires** :
   - Le service Panier v√©rifie les articles disponibles.
   - Le service Commande v√©rifie les d√©tails de la commande et pr√©pare les donn√©es pour le paiement.
3. **Compensation** : Si une √©tape √©choue, des actions compensatoires sont d√©clench√©es pour annuler les op√©rations d√©j√† effectu√©es.

---

## üöÄ Installation

### Pr√©requis

1. Installer **Java 11** ou une version sup√©rieure.
2. Installer **Docker**.
3. Installer **Maven**.
3. Installer **Spring boot**.
4. Installer **MySQL 8.0.40**.

### √âtapes

1. Clonez ce d√©p√¥t :

   git clone https://github.com/Idriss5234/Microservices_SpringBoot.git
   cd Microservices_SpringBoot

2. Construisez les microservices avec Maven :

mvn clean install

3. Configurez la base de donn√©es MySQL pour chaque service. Exemple de cr√©ation d'une base pour le service Panier :
  
CREATE DATABASE panier_db;

---

## üîß Configuration

### Fichiers de configuration
Chaque microservice poss√®de son propre fichier `application.yml`. Voici un exemple pour le service Panier :

```yaml
spring:
  datasource:
    url: jdbc:mysql://localhost:3306/panier_db
    username: root
    password: password
    driver-class-name: com.mysql.cj.jdbc.Driver
  rabbitmq:
    host: localhost
    port: 5672
    username: guest
    password: guest
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
server:
  port: 8081

### Assurez-vous que les variables suivantes sont d√©finies pour tous les services :

SPRING_DATASOURCE_URL
SPRING_DATASOURCE_USERNAME
SPRING_DATASOURCE_PASSWORD

---

## ‚ñ∂Ô∏è Ex√©cution du projet
  
1. D√©marrez RabbitMQ (si non lanc√© avec Docker) :

docker run -d --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:3-management
  
2. Lancez chaque microservice :

cd mico-service-panier
mvn spring-boot:run

cd mico-service-commande
mvn spring-boot:run

cd mico-service-utilisateur
mvn spring-boot:run
  
3. Acc√©dez √† RabbitMQ Management UI : http://localhost:15672

Identifiants par d√©faut : guest / guest

---

## üß™ Tests
  
### Tests manuels avec Postman

Sc√©narios disponibles :
  
1. Effectuez les tests pour v√©rifier les fonctionnalit√©s principales (CRUD)
2. Testez les sc√©narios Saga :
  Succ√®s : Simulez un workflow complet o√π tous les services fonctionnent correctement.
  √âchec : Simulez un √©chec dans l'un des services (exemple : rupture de stock dans Panier) et observez les actions compensatoires.

### V√©rification avec RabbitMQ

Connectez-vous √† l'interface de RabbitMQ : http://localhost:15672.
Surveillez les messages dans les files d'attente pour confirmer que les communications entre services fonctionnent correctement.


